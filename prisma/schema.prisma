// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  kickUserId      String    @unique
  username        String
  email           String?
  profilePicture  String?
  sessionId       String?   // JWT session ID
  tokenInfo       Json?     // Token introspect bilgileri
  scope           String[]  @default([])
  settings        Json?     @default("{}")
  isActive        Boolean   @default(true)
  lastLoginAt     DateTime?
  lastActivityAt  DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  refreshTokens   RefreshToken[]
  accessTokens AccessToken[]
  alerts          Alert[]
  webhooks        Webhook[]
  alertVideos     AlertVideo[]
  @@map("users")
}

model AlertVideo {
  id          String   @id @default(cuid())
  userId      String
  alertType   String   // "follow", "subscribe", "tip"
  videoUrl    String   // File path veya cloud URL
  videoName   String?
  fileSize    Int?     // bytes
  duration    Int?     // milliseconds
  mimeType    String?  // "video/mp4", "video/webm"
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0) // Video sıralaması için
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, alertType, sortOrder]) // Her alert türü için max 5 video
  @@map("alert_videos")
}

model AccessToken {
  id          String   @id @default(cuid())
  token       String   @unique
  userId      String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  isActive     Boolean  @default(true)
  lastUsedAt   DateTime @default(now())
  deviceInfo  String?  
  ipAddress   String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("access_tokens")
}
model RefreshToken {
  id           String   @id @default(cuid())
  token        String   @unique
  userId       String   
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  isActive     Boolean  @default(true)
  lastUsedAt   DateTime @default(now())
  deviceInfo  String?  
  ipAddress   String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Alert {
  id        String   @id @default(cuid())
  userId    String
  type      String   
  username  String   
  message   String?
  amount    Float?  
  data      Json?    
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("alerts")
}

model Webhook {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String
  events    String[] // ["follow", "subscribe", "tip"]
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("webhooks")
}